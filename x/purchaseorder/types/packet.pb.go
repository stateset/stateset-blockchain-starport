// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stateset/purchaseorder/v1beta1/packet.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// IbcPurchaseOrderPacketData defines a struct for the packet payload
type IbcPurchaseOrderPacketData struct {
	Creator             string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PurchaseorderId     string `protobuf:"bytes,2,opt,name=purchaseorder_id,json=purchaseorderId,proto3" json:"purchaseorder_id,omitempty"`
	PurchaseorderNumber string `protobuf:"bytes,3,opt,name=purchaseorder_number,json=purchaseorderNumber,proto3" json:"purchaseorder_number,omitempty"`
	PurchaseorderHash   string `protobuf:"bytes,4,opt,name=purchaseorder_hash,json=purchaseorderHash,proto3" json:"purchaseorder_hash,omitempty"`
	PurchaseorderStatus string `protobuf:"bytes,5,opt,name=purchaseorder_status,json=purchaseorderStatus,proto3" json:"purchaseorder_status,omitempty"`
	Description         string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	PurchaseDate        string `protobuf:"bytes,7,opt,name=purchase_date,json=purchaseDate,proto3" json:"purchase_date,omitempty"`
	DeliveryDate        string `protobuf:"bytes,8,opt,name=delivery_date,json=deliveryDate,proto3" json:"delivery_date,omitempty"`
	Subtotal            string `protobuf:"bytes,9,opt,name=subtotal,proto3" json:"subtotal,omitempty"`
	Total               string `protobuf:"bytes,10,opt,name=total,proto3" json:"total,omitempty"`
	Purchaser           string `protobuf:"bytes,11,opt,name=purchaser,proto3" json:"purchaser,omitempty"`
	Vendor              string `protobuf:"bytes,12,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Fulfiller           string `protobuf:"bytes,13,opt,name=fulfiller,proto3" json:"fulfiller,omitempty"`
	Financer            string `protobuf:"bytes,14,opt,name=financer,proto3" json:"financer,omitempty"`
}

func (m *IbcPurchaseOrderPacketData) Reset()         { *m = IbcPurchaseOrderPacketData{} }
func (m *IbcPurchaseOrderPacketData) String() string { return proto.CompactTextString(m) }
func (*IbcPurchaseOrderPacketData) ProtoMessage()    {}
func (*IbcPurchaseOrderPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_aec91d3a5dba4602, []int{0}
}
func (m *IbcPurchaseOrderPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IbcPurchaseOrderPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IbcPurchaseOrderPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IbcPurchaseOrderPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IbcPurchaseOrderPacketData.Merge(m, src)
}
func (m *IbcPurchaseOrderPacketData) XXX_Size() int {
	return m.Size()
}
func (m *IbcPurchaseOrderPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_IbcPurchaseOrderPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_IbcPurchaseOrderPacketData proto.InternalMessageInfo

func (m *IbcPurchaseOrderPacketData) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *IbcPurchaseOrderPacketData) GetPurchaseorderId() string {
	if m != nil {
		return m.PurchaseorderId
	}
	return ""
}

func (m *IbcPurchaseOrderPacketData) GetPurchaseorderNumber() string {
	if m != nil {
		return m.PurchaseorderNumber
	}
	return ""
}

func (m *IbcPurchaseOrderPacketData) GetPurchaseorderHash() string {
	if m != nil {
		return m.PurchaseorderHash
	}
	return ""
}

func (m *IbcPurchaseOrderPacketData) GetPurchaseorderStatus() string {
	if m != nil {
		return m.PurchaseorderStatus
	}
	return ""
}

func (m *IbcPurchaseOrderPacketData) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *IbcPurchaseOrderPacketData) GetPurchaseDate() string {
	if m != nil {
		return m.PurchaseDate
	}
	return ""
}

func (m *IbcPurchaseOrderPacketData) GetDeliveryDate() string {
	if m != nil {
		return m.DeliveryDate
	}
	return ""
}

func (m *IbcPurchaseOrderPacketData) GetSubtotal() string {
	if m != nil {
		return m.Subtotal
	}
	return ""
}

func (m *IbcPurchaseOrderPacketData) GetTotal() string {
	if m != nil {
		return m.Total
	}
	return ""
}

func (m *IbcPurchaseOrderPacketData) GetPurchaser() string {
	if m != nil {
		return m.Purchaser
	}
	return ""
}

func (m *IbcPurchaseOrderPacketData) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *IbcPurchaseOrderPacketData) GetFulfiller() string {
	if m != nil {
		return m.Fulfiller
	}
	return ""
}

func (m *IbcPurchaseOrderPacketData) GetFinancer() string {
	if m != nil {
		return m.Financer
	}
	return ""
}

func init() {
	proto.RegisterType((*IbcPurchaseOrderPacketData)(nil), "stateset.purchaseorder.v1beta1.IbcPurchaseOrderPacketData")
}

func init() {
	proto.RegisterFile("stateset/purchaseorder/v1beta1/packet.proto", fileDescriptor_aec91d3a5dba4602)
}

var fileDescriptor_aec91d3a5dba4602 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcb, 0x8e, 0xd3, 0x30,
	0x14, 0x86, 0x1b, 0xe8, 0xd5, 0x6d, 0xb9, 0x98, 0x0a, 0x59, 0x15, 0x8a, 0x2a, 0xd8, 0x80, 0x50,
	0x13, 0x55, 0xbc, 0x01, 0xaa, 0x10, 0xdd, 0x40, 0x05, 0x3b, 0x36, 0xc5, 0x71, 0x4e, 0x89, 0xd5,
	0x34, 0x8e, 0xec, 0x93, 0x8a, 0xee, 0x79, 0x00, 0x1e, 0x8b, 0x65, 0x97, 0x2c, 0x47, 0xed, 0x8b,
	0x8c, 0xe2, 0xd4, 0x9d, 0xc9, 0xcc, 0xec, 0x72, 0xfe, 0xef, 0xfb, 0x6d, 0x47, 0x3a, 0xe4, 0xbd,
	0x41, 0x8e, 0x60, 0x00, 0xc3, 0xbc, 0xd0, 0x22, 0xe1, 0x06, 0x94, 0x8e, 0x41, 0x87, 0xbb, 0x59,
	0x04, 0xc8, 0x67, 0x61, 0xce, 0xc5, 0x06, 0x30, 0xc8, 0xb5, 0x42, 0x45, 0x7d, 0x27, 0x07, 0x35,
	0x39, 0x38, 0xcb, 0xaf, 0xff, 0x34, 0xc9, 0x78, 0x11, 0x89, 0xe5, 0x19, 0x7e, 0x2d, 0xe1, 0xd2,
	0x1e, 0x30, 0xe7, 0xc8, 0x29, 0x23, 0x1d, 0xa1, 0x81, 0xa3, 0xd2, 0xcc, 0x9b, 0x78, 0x6f, 0x7b,
	0xdf, 0xdc, 0x48, 0xdf, 0x91, 0x67, 0xb5, 0x13, 0x57, 0x32, 0x66, 0x8f, 0xac, 0xf2, 0xb4, 0x96,
	0x2f, 0x62, 0x3a, 0x23, 0xa3, 0xba, 0x9a, 0x15, 0xdb, 0x08, 0x34, 0x7b, 0x6c, 0xf5, 0x17, 0x35,
	0xf6, 0xc5, 0x22, 0x3a, 0x25, 0xb4, 0x5e, 0x49, 0xb8, 0x49, 0x58, 0xd3, 0x16, 0x9e, 0xd7, 0xc8,
	0x67, 0x6e, 0x92, 0xfb, 0x37, 0x94, 0x7f, 0x5d, 0x18, 0xd6, 0x7a, 0xe0, 0x86, 0xef, 0x16, 0xd1,
	0x09, 0xe9, 0xc7, 0x60, 0x84, 0x96, 0x39, 0x4a, 0x95, 0xb1, 0xb6, 0x35, 0x6f, 0x47, 0xf4, 0x0d,
	0x19, 0xba, 0xe2, 0x2a, 0xe6, 0x08, 0xac, 0x63, 0x9d, 0x81, 0x0b, 0xe7, 0x1c, 0xa1, 0x94, 0x62,
	0x48, 0xe5, 0x0e, 0xf4, 0xbe, 0x92, 0xba, 0x95, 0xe4, 0x42, 0x2b, 0x8d, 0x49, 0xd7, 0x14, 0x11,
	0x2a, 0xe4, 0x29, 0xeb, 0x59, 0x7e, 0x99, 0xe9, 0x88, 0xb4, 0x2a, 0x40, 0x2c, 0xa8, 0x06, 0xfa,
	0x8a, 0xf4, 0xdc, 0x35, 0x9a, 0xf5, 0x2d, 0xb9, 0x09, 0xe8, 0x4b, 0xd2, 0xde, 0x41, 0x16, 0x2b,
	0xcd, 0x06, 0x16, 0x9d, 0xa7, 0xb2, 0xb5, 0x2e, 0xd2, 0xb5, 0x4c, 0x53, 0xd0, 0x6c, 0x58, 0xb5,
	0x2e, 0x41, 0xf9, 0x8a, 0xb5, 0xcc, 0x78, 0x26, 0x40, 0xb3, 0x27, 0xd5, 0x2b, 0xdc, 0xfc, 0xf1,
	0xe7, 0xbf, 0xa3, 0xef, 0x1d, 0x8e, 0xbe, 0x77, 0x75, 0xf4, 0xbd, 0xbf, 0x27, 0xbf, 0x71, 0x38,
	0xf9, 0x8d, 0xff, 0x27, 0xbf, 0xf1, 0xe3, 0xd3, 0x2f, 0x89, 0x49, 0x11, 0x05, 0x42, 0x6d, 0xc3,
	0xcb, 0xe2, 0xb9, 0x8f, 0x69, 0x94, 0x2a, 0xb1, 0x11, 0x09, 0x97, 0xd9, 0xd4, 0x20, 0xd7, 0xb9,
	0xd2, 0x18, 0xfe, 0xbe, 0xb3, 0x97, 0xb8, 0xcf, 0xc1, 0x44, 0x6d, 0xbb, 0x8f, 0x1f, 0xae, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x99, 0x31, 0x9f, 0x00, 0xbe, 0x02, 0x00, 0x00,
}

func (m *IbcPurchaseOrderPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IbcPurchaseOrderPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IbcPurchaseOrderPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Financer) > 0 {
		i -= len(m.Financer)
		copy(dAtA[i:], m.Financer)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Financer)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Fulfiller) > 0 {
		i -= len(m.Fulfiller)
		copy(dAtA[i:], m.Fulfiller)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Fulfiller)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Vendor) > 0 {
		i -= len(m.Vendor)
		copy(dAtA[i:], m.Vendor)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Vendor)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Purchaser) > 0 {
		i -= len(m.Purchaser)
		copy(dAtA[i:], m.Purchaser)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Purchaser)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Total) > 0 {
		i -= len(m.Total)
		copy(dAtA[i:], m.Total)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Total)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Subtotal) > 0 {
		i -= len(m.Subtotal)
		copy(dAtA[i:], m.Subtotal)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Subtotal)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.DeliveryDate) > 0 {
		i -= len(m.DeliveryDate)
		copy(dAtA[i:], m.DeliveryDate)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.DeliveryDate)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PurchaseDate) > 0 {
		i -= len(m.PurchaseDate)
		copy(dAtA[i:], m.PurchaseDate)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.PurchaseDate)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PurchaseorderStatus) > 0 {
		i -= len(m.PurchaseorderStatus)
		copy(dAtA[i:], m.PurchaseorderStatus)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.PurchaseorderStatus)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PurchaseorderHash) > 0 {
		i -= len(m.PurchaseorderHash)
		copy(dAtA[i:], m.PurchaseorderHash)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.PurchaseorderHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PurchaseorderNumber) > 0 {
		i -= len(m.PurchaseorderNumber)
		copy(dAtA[i:], m.PurchaseorderNumber)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.PurchaseorderNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PurchaseorderId) > 0 {
		i -= len(m.PurchaseorderId)
		copy(dAtA[i:], m.PurchaseorderId)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.PurchaseorderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IbcPurchaseOrderPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.PurchaseorderId)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.PurchaseorderNumber)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.PurchaseorderHash)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.PurchaseorderStatus)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.PurchaseDate)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.DeliveryDate)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Subtotal)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Total)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Purchaser)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Vendor)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Fulfiller)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Financer)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func sovPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IbcPurchaseOrderPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IbcPurchaseOrderPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IbcPurchaseOrderPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseorderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PurchaseorderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseorderNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PurchaseorderNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseorderHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PurchaseorderHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseorderStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PurchaseorderStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PurchaseDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeliveryDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtotal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtotal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchaser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Purchaser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vendor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vendor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fulfiller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fulfiller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Financer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Financer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacket = fmt.Errorf("proto: unexpected end of group")
)
