// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stateset/invoice/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// State is an enum which refers to state of an ourchase order
type State int32

const (
	// Prefix should start with 0 in enum. So declaring dummy state
	InvoiceStateInvalid State = 0
	Request             State = 1
	Paid                State = 2
	Canceled            State = 3
	Factored            State = 4
)

var State_name = map[int32]string{
	0: "invalid",
	1: "request",
	2: "paid",
	3: "canceled",
	4: "factored",
}

var State_value = map[string]int32{
	"invalid":  0,
	"request":  1,
	"paid":     2,
	"canceled": 3,
	"factored": 4,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}

func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_631a0acfed97233b, []int{0}
}

type Invoice struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	InvoiceId       string `protobuf:"bytes,2,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
	InvoiceNumber   string `protobuf:"bytes,3,opt,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	InvoiceName     string `protobuf:"bytes,4,opt,name=invoice_name,json=invoiceName,proto3" json:"invoice_name,omitempty"`
	BillingReason   string `protobuf:"bytes,5,opt,name=billing_reason,json=billingReason,proto3" json:"billing_reason,omitempty"`
	AmountDue       string `protobuf:"bytes,6,opt,name=amount_due,json=amountDue,proto3" json:"amount_due,omitempty"`
	AmountPaid      string `protobuf:"bytes,7,opt,name=amount_paid,json=amountPaid,proto3" json:"amount_paid,omitempty"`
	AmountRemaining string `protobuf:"bytes,8,opt,name=amount_remaining,json=amountRemaining,proto3" json:"amount_remaining,omitempty"`
	Subtotal        string `protobuf:"bytes,9,opt,name=subtotal,proto3" json:"subtotal,omitempty"`
	Total           string `protobuf:"bytes,10,opt,name=total,proto3" json:"total,omitempty"`
	Party           string `protobuf:"bytes,11,opt,name=party,proto3" json:"party,omitempty"`
	Counterparty    string `protobuf:"bytes,12,opt,name=counterparty,proto3" json:"counterparty,omitempty"`
	Factor          string `protobuf:"bytes,13,opt,name=factor,proto3" json:"factor,omitempty"`
	DueDate         string `protobuf:"bytes,14,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	PeriodStartDate string `protobuf:"bytes,15,opt,name=period_start_date,json=periodStartDate,proto3" json:"period_start_date,omitempty"`
	PeriodEndDate   string `protobuf:"bytes,16,opt,name=period_end_date,json=periodEndDate,proto3" json:"period_end_date,omitempty"`
}

func (m *Invoice) Reset()         { *m = Invoice{} }
func (m *Invoice) String() string { return proto.CompactTextString(m) }
func (*Invoice) ProtoMessage()    {}
func (*Invoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_631a0acfed97233b, []int{0}
}
func (m *Invoice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Invoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Invoice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Invoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Invoice.Merge(m, src)
}
func (m *Invoice) XXX_Size() int {
	return m.Size()
}
func (m *Invoice) XXX_DiscardUnknown() {
	xxx_messageInfo_Invoice.DiscardUnknown(m)
}

var xxx_messageInfo_Invoice proto.InternalMessageInfo

func (m *Invoice) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Invoice) GetInvoiceId() string {
	if m != nil {
		return m.InvoiceId
	}
	return ""
}

func (m *Invoice) GetInvoiceNumber() string {
	if m != nil {
		return m.InvoiceNumber
	}
	return ""
}

func (m *Invoice) GetInvoiceName() string {
	if m != nil {
		return m.InvoiceName
	}
	return ""
}

func (m *Invoice) GetBillingReason() string {
	if m != nil {
		return m.BillingReason
	}
	return ""
}

func (m *Invoice) GetAmountDue() string {
	if m != nil {
		return m.AmountDue
	}
	return ""
}

func (m *Invoice) GetAmountPaid() string {
	if m != nil {
		return m.AmountPaid
	}
	return ""
}

func (m *Invoice) GetAmountRemaining() string {
	if m != nil {
		return m.AmountRemaining
	}
	return ""
}

func (m *Invoice) GetSubtotal() string {
	if m != nil {
		return m.Subtotal
	}
	return ""
}

func (m *Invoice) GetTotal() string {
	if m != nil {
		return m.Total
	}
	return ""
}

func (m *Invoice) GetParty() string {
	if m != nil {
		return m.Party
	}
	return ""
}

func (m *Invoice) GetCounterparty() string {
	if m != nil {
		return m.Counterparty
	}
	return ""
}

func (m *Invoice) GetFactor() string {
	if m != nil {
		return m.Factor
	}
	return ""
}

func (m *Invoice) GetDueDate() string {
	if m != nil {
		return m.DueDate
	}
	return ""
}

func (m *Invoice) GetPeriodStartDate() string {
	if m != nil {
		return m.PeriodStartDate
	}
	return ""
}

func (m *Invoice) GetPeriodEndDate() string {
	if m != nil {
		return m.PeriodEndDate
	}
	return ""
}

type InvoiceFilters struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner" yaml:"owner"`
	State string `protobuf:"bytes,2,opt,name=state,proto3" json:"state" yaml:"state"`
}

func (m *InvoiceFilters) Reset()         { *m = InvoiceFilters{} }
func (m *InvoiceFilters) String() string { return proto.CompactTextString(m) }
func (*InvoiceFilters) ProtoMessage()    {}
func (*InvoiceFilters) Descriptor() ([]byte, []int) {
	return fileDescriptor_631a0acfed97233b, []int{1}
}
func (m *InvoiceFilters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvoiceFilters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvoiceFilters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvoiceFilters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvoiceFilters.Merge(m, src)
}
func (m *InvoiceFilters) XXX_Size() int {
	return m.Size()
}
func (m *InvoiceFilters) XXX_DiscardUnknown() {
	xxx_messageInfo_InvoiceFilters.DiscardUnknown(m)
}

var xxx_messageInfo_InvoiceFilters proto.InternalMessageInfo

func (m *InvoiceFilters) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *InvoiceFilters) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

// MsgCreateInvoiceRequest is the Msg/CreateInvoice request type.
type MsgCreateInvoiceRequest struct {
	// sender is the address of the sender of the transaction.
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	InvoiceId       string `protobuf:"bytes,2,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
	InvoiceNumber   string `protobuf:"bytes,3,opt,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	InvoiceName     string `protobuf:"bytes,4,opt,name=invoice_name,json=invoiceName,proto3" json:"invoice_name,omitempty"`
	BillingReason   string `protobuf:"bytes,5,opt,name=billing_reason,json=billingReason,proto3" json:"billing_reason,omitempty"`
	AmountDue       string `protobuf:"bytes,6,opt,name=amount_due,json=amountDue,proto3" json:"amount_due,omitempty"`
	AmountPaid      string `protobuf:"bytes,7,opt,name=amount_paid,json=amountPaid,proto3" json:"amount_paid,omitempty"`
	AmountRemaining string `protobuf:"bytes,8,opt,name=amount_remaining,json=amountRemaining,proto3" json:"amount_remaining,omitempty"`
	Subtotal        string `protobuf:"bytes,9,opt,name=subtotal,proto3" json:"subtotal,omitempty"`
	Total           string `protobuf:"bytes,10,opt,name=total,proto3" json:"total,omitempty"`
	Party           string `protobuf:"bytes,11,opt,name=party,proto3" json:"party,omitempty"`
	Counterparty    string `protobuf:"bytes,12,opt,name=counterparty,proto3" json:"counterparty,omitempty"`
	Factor          string `protobuf:"bytes,13,opt,name=factor,proto3" json:"factor,omitempty"`
	DueDate         string `protobuf:"bytes,14,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	PeriodStartDate string `protobuf:"bytes,15,opt,name=period_start_date,json=periodStartDate,proto3" json:"period_start_date,omitempty"`
	PeriodEndDate   string `protobuf:"bytes,16,opt,name=period_end_date,json=periodEndDate,proto3" json:"period_end_date,omitempty"`
}

func (m *MsgCreateInvoiceRequest) Reset()         { *m = MsgCreateInvoiceRequest{} }
func (m *MsgCreateInvoiceRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCreateInvoiceRequest) ProtoMessage()    {}
func (*MsgCreateInvoiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_631a0acfed97233b, []int{2}
}
func (m *MsgCreateInvoiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateInvoiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateInvoiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateInvoiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateInvoiceRequest.Merge(m, src)
}
func (m *MsgCreateInvoiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateInvoiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateInvoiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateInvoiceRequest proto.InternalMessageInfo

func (m *MsgCreateInvoiceRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateInvoiceRequest) GetInvoiceId() string {
	if m != nil {
		return m.InvoiceId
	}
	return ""
}

func (m *MsgCreateInvoiceRequest) GetInvoiceNumber() string {
	if m != nil {
		return m.InvoiceNumber
	}
	return ""
}

func (m *MsgCreateInvoiceRequest) GetInvoiceName() string {
	if m != nil {
		return m.InvoiceName
	}
	return ""
}

func (m *MsgCreateInvoiceRequest) GetBillingReason() string {
	if m != nil {
		return m.BillingReason
	}
	return ""
}

func (m *MsgCreateInvoiceRequest) GetAmountDue() string {
	if m != nil {
		return m.AmountDue
	}
	return ""
}

func (m *MsgCreateInvoiceRequest) GetAmountPaid() string {
	if m != nil {
		return m.AmountPaid
	}
	return ""
}

func (m *MsgCreateInvoiceRequest) GetAmountRemaining() string {
	if m != nil {
		return m.AmountRemaining
	}
	return ""
}

func (m *MsgCreateInvoiceRequest) GetSubtotal() string {
	if m != nil {
		return m.Subtotal
	}
	return ""
}

func (m *MsgCreateInvoiceRequest) GetTotal() string {
	if m != nil {
		return m.Total
	}
	return ""
}

func (m *MsgCreateInvoiceRequest) GetParty() string {
	if m != nil {
		return m.Party
	}
	return ""
}

func (m *MsgCreateInvoiceRequest) GetCounterparty() string {
	if m != nil {
		return m.Counterparty
	}
	return ""
}

func (m *MsgCreateInvoiceRequest) GetFactor() string {
	if m != nil {
		return m.Factor
	}
	return ""
}

func (m *MsgCreateInvoiceRequest) GetDueDate() string {
	if m != nil {
		return m.DueDate
	}
	return ""
}

func (m *MsgCreateInvoiceRequest) GetPeriodStartDate() string {
	if m != nil {
		return m.PeriodStartDate
	}
	return ""
}

func (m *MsgCreateInvoiceRequest) GetPeriodEndDate() string {
	if m != nil {
		return m.PeriodEndDate
	}
	return ""
}

// MsgSignDataResponse is the Msg/SignData response type.
type MsgCreateInvoiceResponse struct {
	InvoiceId string `protobuf:"bytes,1,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
}

func (m *MsgCreateInvoiceResponse) Reset()         { *m = MsgCreateInvoiceResponse{} }
func (m *MsgCreateInvoiceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateInvoiceResponse) ProtoMessage()    {}
func (*MsgCreateInvoiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_631a0acfed97233b, []int{3}
}
func (m *MsgCreateInvoiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateInvoiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateInvoiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateInvoiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateInvoiceResponse.Merge(m, src)
}
func (m *MsgCreateInvoiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateInvoiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateInvoiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateInvoiceResponse proto.InternalMessageInfo

func (m *MsgCreateInvoiceResponse) GetInvoiceId() string {
	if m != nil {
		return m.InvoiceId
	}
	return ""
}

// MsgCreateInvoiceRequest is the Msg/CreateInvoice request type.
type MsgUpdateInvoiceRequest struct {
	Sender          string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	InvoiceId       string `protobuf:"bytes,2,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
	InvoiceNumber   string `protobuf:"bytes,3,opt,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	InvoiceName     string `protobuf:"bytes,4,opt,name=invoice_name,json=invoiceName,proto3" json:"invoice_name,omitempty"`
	BillingReason   string `protobuf:"bytes,5,opt,name=billing_reason,json=billingReason,proto3" json:"billing_reason,omitempty"`
	AmountDue       string `protobuf:"bytes,6,opt,name=amount_due,json=amountDue,proto3" json:"amount_due,omitempty"`
	AmountPaid      string `protobuf:"bytes,7,opt,name=amount_paid,json=amountPaid,proto3" json:"amount_paid,omitempty"`
	AmountRemaining string `protobuf:"bytes,8,opt,name=amount_remaining,json=amountRemaining,proto3" json:"amount_remaining,omitempty"`
	Subtotal        string `protobuf:"bytes,9,opt,name=subtotal,proto3" json:"subtotal,omitempty"`
	Total           string `protobuf:"bytes,10,opt,name=total,proto3" json:"total,omitempty"`
	Party           string `protobuf:"bytes,11,opt,name=party,proto3" json:"party,omitempty"`
	Counterparty    string `protobuf:"bytes,12,opt,name=counterparty,proto3" json:"counterparty,omitempty"`
	Factor          string `protobuf:"bytes,13,opt,name=factor,proto3" json:"factor,omitempty"`
	DueDate         string `protobuf:"bytes,14,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	PeriodStartDate string `protobuf:"bytes,15,opt,name=period_start_date,json=periodStartDate,proto3" json:"period_start_date,omitempty"`
	PeriodEndDate   string `protobuf:"bytes,16,opt,name=period_end_date,json=periodEndDate,proto3" json:"period_end_date,omitempty"`
}

func (m *MsgUpdateInvoiceRequest) Reset()         { *m = MsgUpdateInvoiceRequest{} }
func (m *MsgUpdateInvoiceRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateInvoiceRequest) ProtoMessage()    {}
func (*MsgUpdateInvoiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_631a0acfed97233b, []int{4}
}
func (m *MsgUpdateInvoiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateInvoiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateInvoiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateInvoiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateInvoiceRequest.Merge(m, src)
}
func (m *MsgUpdateInvoiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateInvoiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateInvoiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateInvoiceRequest proto.InternalMessageInfo

func (m *MsgUpdateInvoiceRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgUpdateInvoiceRequest) GetInvoiceId() string {
	if m != nil {
		return m.InvoiceId
	}
	return ""
}

func (m *MsgUpdateInvoiceRequest) GetInvoiceNumber() string {
	if m != nil {
		return m.InvoiceNumber
	}
	return ""
}

func (m *MsgUpdateInvoiceRequest) GetInvoiceName() string {
	if m != nil {
		return m.InvoiceName
	}
	return ""
}

func (m *MsgUpdateInvoiceRequest) GetBillingReason() string {
	if m != nil {
		return m.BillingReason
	}
	return ""
}

func (m *MsgUpdateInvoiceRequest) GetAmountDue() string {
	if m != nil {
		return m.AmountDue
	}
	return ""
}

func (m *MsgUpdateInvoiceRequest) GetAmountPaid() string {
	if m != nil {
		return m.AmountPaid
	}
	return ""
}

func (m *MsgUpdateInvoiceRequest) GetAmountRemaining() string {
	if m != nil {
		return m.AmountRemaining
	}
	return ""
}

func (m *MsgUpdateInvoiceRequest) GetSubtotal() string {
	if m != nil {
		return m.Subtotal
	}
	return ""
}

func (m *MsgUpdateInvoiceRequest) GetTotal() string {
	if m != nil {
		return m.Total
	}
	return ""
}

func (m *MsgUpdateInvoiceRequest) GetParty() string {
	if m != nil {
		return m.Party
	}
	return ""
}

func (m *MsgUpdateInvoiceRequest) GetCounterparty() string {
	if m != nil {
		return m.Counterparty
	}
	return ""
}

func (m *MsgUpdateInvoiceRequest) GetFactor() string {
	if m != nil {
		return m.Factor
	}
	return ""
}

func (m *MsgUpdateInvoiceRequest) GetDueDate() string {
	if m != nil {
		return m.DueDate
	}
	return ""
}

func (m *MsgUpdateInvoiceRequest) GetPeriodStartDate() string {
	if m != nil {
		return m.PeriodStartDate
	}
	return ""
}

func (m *MsgUpdateInvoiceRequest) GetPeriodEndDate() string {
	if m != nil {
		return m.PeriodEndDate
	}
	return ""
}

// MsgSignDataResponse is the Msg/SignData response type.
type MsgUpdateInvoiceResponse struct {
	InvoiceId string `protobuf:"bytes,1,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
}

func (m *MsgUpdateInvoiceResponse) Reset()         { *m = MsgUpdateInvoiceResponse{} }
func (m *MsgUpdateInvoiceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateInvoiceResponse) ProtoMessage()    {}
func (*MsgUpdateInvoiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_631a0acfed97233b, []int{5}
}
func (m *MsgUpdateInvoiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateInvoiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateInvoiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateInvoiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateInvoiceResponse.Merge(m, src)
}
func (m *MsgUpdateInvoiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateInvoiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateInvoiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateInvoiceResponse proto.InternalMessageInfo

func (m *MsgUpdateInvoiceResponse) GetInvoiceId() string {
	if m != nil {
		return m.InvoiceId
	}
	return ""
}

// MsgActivateInvoiceRequest is the Msg/ActivateInvoice request type.
type MsgCancelInvoiceRequest struct {
	// sender is the address of the sender of the transaction.
	Sender    string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	InvoiceId string `protobuf:"bytes,2,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
}

func (m *MsgCancelInvoiceRequest) Reset()         { *m = MsgCancelInvoiceRequest{} }
func (m *MsgCancelInvoiceRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCancelInvoiceRequest) ProtoMessage()    {}
func (*MsgCancelInvoiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_631a0acfed97233b, []int{6}
}
func (m *MsgCancelInvoiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelInvoiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelInvoiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelInvoiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelInvoiceRequest.Merge(m, src)
}
func (m *MsgCancelInvoiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelInvoiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelInvoiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelInvoiceRequest proto.InternalMessageInfo

func (m *MsgCancelInvoiceRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgCancelInvoiceRequest) GetInvoiceId() string {
	if m != nil {
		return m.InvoiceId
	}
	return ""
}

// MsgSignDataResponse is the Msg/SignData response type.
type MsgCancelInvoiceResponse struct {
}

func (m *MsgCancelInvoiceResponse) Reset()         { *m = MsgCancelInvoiceResponse{} }
func (m *MsgCancelInvoiceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelInvoiceResponse) ProtoMessage()    {}
func (*MsgCancelInvoiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_631a0acfed97233b, []int{7}
}
func (m *MsgCancelInvoiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelInvoiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelInvoiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelInvoiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelInvoiceResponse.Merge(m, src)
}
func (m *MsgCancelInvoiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelInvoiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelInvoiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelInvoiceResponse proto.InternalMessageInfo

// MsgActivateInvoiceRequest is the Msg/ActivateInvoice request type.
type MsgDeleteInvoiceRequest struct {
	// sender is the address of the sender of the transaction.
	Sender    string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	InvoiceId string `protobuf:"bytes,2,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
}

func (m *MsgDeleteInvoiceRequest) Reset()         { *m = MsgDeleteInvoiceRequest{} }
func (m *MsgDeleteInvoiceRequest) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteInvoiceRequest) ProtoMessage()    {}
func (*MsgDeleteInvoiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_631a0acfed97233b, []int{8}
}
func (m *MsgDeleteInvoiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteInvoiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteInvoiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteInvoiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteInvoiceRequest.Merge(m, src)
}
func (m *MsgDeleteInvoiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteInvoiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteInvoiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteInvoiceRequest proto.InternalMessageInfo

func (m *MsgDeleteInvoiceRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgDeleteInvoiceRequest) GetInvoiceId() string {
	if m != nil {
		return m.InvoiceId
	}
	return ""
}

// MsgSignDataResponse is the Msg/SignData response type.
type MsgDeleteInvoiceResponse struct {
}

func (m *MsgDeleteInvoiceResponse) Reset()         { *m = MsgDeleteInvoiceResponse{} }
func (m *MsgDeleteInvoiceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteInvoiceResponse) ProtoMessage()    {}
func (*MsgDeleteInvoiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_631a0acfed97233b, []int{9}
}
func (m *MsgDeleteInvoiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteInvoiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteInvoiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteInvoiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteInvoiceResponse.Merge(m, src)
}
func (m *MsgDeleteInvoiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteInvoiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteInvoiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteInvoiceResponse proto.InternalMessageInfo

// MsgActivateInvoiceRequest is the Msg/ActivateInvoice request type.
type MsgCompleteInvoiceRequest struct {
	// sender is the address of the sender of the transaction.
	Sender    string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	InvoiceId string `protobuf:"bytes,2,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
}

func (m *MsgCompleteInvoiceRequest) Reset()         { *m = MsgCompleteInvoiceRequest{} }
func (m *MsgCompleteInvoiceRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCompleteInvoiceRequest) ProtoMessage()    {}
func (*MsgCompleteInvoiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_631a0acfed97233b, []int{10}
}
func (m *MsgCompleteInvoiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCompleteInvoiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCompleteInvoiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCompleteInvoiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCompleteInvoiceRequest.Merge(m, src)
}
func (m *MsgCompleteInvoiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCompleteInvoiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCompleteInvoiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCompleteInvoiceRequest proto.InternalMessageInfo

func (m *MsgCompleteInvoiceRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgCompleteInvoiceRequest) GetInvoiceId() string {
	if m != nil {
		return m.InvoiceId
	}
	return ""
}

// MsgSignDataResponse is the Msg/SignData response type.
type MsgCompleteInvoiceResponse struct {
}

func (m *MsgCompleteInvoiceResponse) Reset()         { *m = MsgCompleteInvoiceResponse{} }
func (m *MsgCompleteInvoiceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCompleteInvoiceResponse) ProtoMessage()    {}
func (*MsgCompleteInvoiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_631a0acfed97233b, []int{11}
}
func (m *MsgCompleteInvoiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCompleteInvoiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCompleteInvoiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCompleteInvoiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCompleteInvoiceResponse.Merge(m, src)
}
func (m *MsgCompleteInvoiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCompleteInvoiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCompleteInvoiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCompleteInvoiceResponse proto.InternalMessageInfo

type MsgFactorInvoiceRequest struct {
	// sender is the address of the sender of the transaction.
	Sender    string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	InvoiceId string `protobuf:"bytes,2,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
}

func (m *MsgFactorInvoiceRequest) Reset()         { *m = MsgFactorInvoiceRequest{} }
func (m *MsgFactorInvoiceRequest) String() string { return proto.CompactTextString(m) }
func (*MsgFactorInvoiceRequest) ProtoMessage()    {}
func (*MsgFactorInvoiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_631a0acfed97233b, []int{12}
}
func (m *MsgFactorInvoiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFactorInvoiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFactorInvoiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFactorInvoiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFactorInvoiceRequest.Merge(m, src)
}
func (m *MsgFactorInvoiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgFactorInvoiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFactorInvoiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFactorInvoiceRequest proto.InternalMessageInfo

func (m *MsgFactorInvoiceRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgFactorInvoiceRequest) GetInvoiceId() string {
	if m != nil {
		return m.InvoiceId
	}
	return ""
}

type MsgFactorInvoiceResponse struct {
}

func (m *MsgFactorInvoiceResponse) Reset()         { *m = MsgFactorInvoiceResponse{} }
func (m *MsgFactorInvoiceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFactorInvoiceResponse) ProtoMessage()    {}
func (*MsgFactorInvoiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_631a0acfed97233b, []int{13}
}
func (m *MsgFactorInvoiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFactorInvoiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFactorInvoiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFactorInvoiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFactorInvoiceResponse.Merge(m, src)
}
func (m *MsgFactorInvoiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFactorInvoiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFactorInvoiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFactorInvoiceResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("stateset.invoice.v1beta1.State", State_name, State_value)
	proto.RegisterType((*Invoice)(nil), "stateset.invoice.v1beta1.Invoice")
	proto.RegisterType((*InvoiceFilters)(nil), "stateset.invoice.v1beta1.InvoiceFilters")
	proto.RegisterType((*MsgCreateInvoiceRequest)(nil), "stateset.invoice.v1beta1.MsgCreateInvoiceRequest")
	proto.RegisterType((*MsgCreateInvoiceResponse)(nil), "stateset.invoice.v1beta1.MsgCreateInvoiceResponse")
	proto.RegisterType((*MsgUpdateInvoiceRequest)(nil), "stateset.invoice.v1beta1.MsgUpdateInvoiceRequest")
	proto.RegisterType((*MsgUpdateInvoiceResponse)(nil), "stateset.invoice.v1beta1.MsgUpdateInvoiceResponse")
	proto.RegisterType((*MsgCancelInvoiceRequest)(nil), "stateset.invoice.v1beta1.MsgCancelInvoiceRequest")
	proto.RegisterType((*MsgCancelInvoiceResponse)(nil), "stateset.invoice.v1beta1.MsgCancelInvoiceResponse")
	proto.RegisterType((*MsgDeleteInvoiceRequest)(nil), "stateset.invoice.v1beta1.MsgDeleteInvoiceRequest")
	proto.RegisterType((*MsgDeleteInvoiceResponse)(nil), "stateset.invoice.v1beta1.MsgDeleteInvoiceResponse")
	proto.RegisterType((*MsgCompleteInvoiceRequest)(nil), "stateset.invoice.v1beta1.MsgCompleteInvoiceRequest")
	proto.RegisterType((*MsgCompleteInvoiceResponse)(nil), "stateset.invoice.v1beta1.MsgCompleteInvoiceResponse")
	proto.RegisterType((*MsgFactorInvoiceRequest)(nil), "stateset.invoice.v1beta1.MsgFactorInvoiceRequest")
	proto.RegisterType((*MsgFactorInvoiceResponse)(nil), "stateset.invoice.v1beta1.MsgFactorInvoiceResponse")
}

func init() { proto.RegisterFile("stateset/invoice/v1beta1/tx.proto", fileDescriptor_631a0acfed97233b) }

var fileDescriptor_631a0acfed97233b = []byte{
	// 870 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x97, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xc7, 0x77, 0x9b, 0xfd, 0x95, 0x97, 0x6d, 0xba, 0x0c, 0x55, 0xeb, 0x58, 0xb0, 0xbb, 0xb5,
	0x00, 0x41, 0xa5, 0xae, 0x95, 0x96, 0x0b, 0x3d, 0xa1, 0x36, 0x44, 0xca, 0xa1, 0xa8, 0xda, 0x8a,
	0x4b, 0x2f, 0xab, 0x59, 0xcf, 0xab, 0x3b, 0xc2, 0xf6, 0x18, 0x7b, 0x1c, 0x92, 0xff, 0x00, 0xe5,
	0x04, 0x47, 0x0e, 0x11, 0x20, 0xfe, 0x02, 0xfe, 0x0b, 0x8e, 0x3d, 0x72, 0xaa, 0x50, 0x72, 0x41,
	0x1c, 0xf9, 0x0b, 0x90, 0xe7, 0x8d, 0xb7, 0xca, 0xd6, 0x65, 0x89, 0x94, 0x5b, 0x73, 0xdb, 0xf7,
	0x7d, 0xdf, 0x99, 0x37, 0x33, 0xfe, 0xbc, 0xf1, 0x1a, 0x6e, 0xe5, 0x9a, 0x6b, 0xcc, 0x51, 0xfb,
	0x32, 0xd9, 0x57, 0x32, 0x40, 0x7f, 0x7f, 0x7b, 0x8e, 0x9a, 0x6f, 0xfb, 0xfa, 0x60, 0x92, 0x66,
	0x4a, 0x2b, 0xe6, 0x54, 0x96, 0x89, 0xb5, 0x4c, 0xac, 0xc5, 0xbd, 0x1e, 0xaa, 0x50, 0x19, 0x93,
	0x5f, 0xfe, 0x22, 0xbf, 0x3b, 0x0a, 0x95, 0x0a, 0x23, 0xf4, 0x4d, 0x34, 0x2f, 0x9e, 0xf9, 0x5a,
	0xc6, 0x98, 0x6b, 0x1e, 0xa7, 0x64, 0xf0, 0x7e, 0x68, 0x41, 0x77, 0x8f, 0xa6, 0x62, 0x0e, 0x74,
	0x83, 0x0c, 0xb9, 0x56, 0x99, 0xd3, 0x1c, 0x37, 0x3f, 0x5e, 0x9f, 0x56, 0x21, 0x7b, 0x1f, 0xc0,
	0xd6, 0x9b, 0x49, 0xe1, 0x5c, 0x31, 0xc9, 0x75, 0xab, 0xec, 0x09, 0xf6, 0x21, 0x6c, 0x56, 0xe9,
	0xa4, 0x88, 0xe7, 0x98, 0x39, 0x6b, 0xc6, 0x72, 0xd5, 0xaa, 0x5f, 0x1a, 0x91, 0xdd, 0x82, 0xfe,
	0xc2, 0xc6, 0x63, 0x74, 0x5a, 0xc6, 0xb4, 0x51, 0x99, 0x78, 0x8c, 0xe5, 0x4c, 0x73, 0x19, 0x45,
	0x32, 0x09, 0x67, 0x19, 0xf2, 0x5c, 0x25, 0x4e, 0x9b, 0x66, 0xb2, 0xea, 0xd4, 0x88, 0xe5, 0x7a,
	0x78, 0xac, 0x8a, 0x44, 0xcf, 0x44, 0x81, 0x4e, 0x87, 0xd6, 0x43, 0xca, 0x4e, 0x81, 0x6c, 0x04,
	0x1b, 0x36, 0x9d, 0x72, 0x29, 0x9c, 0xae, 0xc9, 0xdb, 0x11, 0x8f, 0xb9, 0x14, 0xec, 0x13, 0x18,
	0x58, 0x43, 0x86, 0x31, 0x97, 0x89, 0x4c, 0x42, 0xa7, 0x67, 0x5c, 0xd7, 0x48, 0x9f, 0x56, 0x32,
	0x73, 0xa1, 0x97, 0x17, 0x73, 0xad, 0x34, 0x8f, 0x9c, 0x75, 0x63, 0x59, 0xc4, 0xec, 0x3a, 0xb4,
	0x29, 0x01, 0x26, 0xd1, 0x5e, 0xa8, 0x29, 0xcf, 0xf4, 0xa1, 0xb3, 0x41, 0xaa, 0x09, 0x98, 0x07,
	0xfd, 0xa0, 0x9c, 0x19, 0x33, 0x4a, 0xf6, 0x4d, 0xf2, 0x8c, 0xc6, 0x6e, 0x40, 0xe7, 0x19, 0x0f,
	0xca, 0xf3, 0xbf, 0x6a, 0xb2, 0x36, 0x62, 0x5b, 0xd0, 0x13, 0x05, 0xce, 0x04, 0xd7, 0xe8, 0x6c,
	0xd2, 0x93, 0x11, 0x05, 0xee, 0x70, 0x8d, 0xec, 0x36, 0xbc, 0x93, 0x62, 0x26, 0x95, 0x98, 0xe5,
	0x9a, 0x67, 0x9a, 0x3c, 0xd7, 0x68, 0x2b, 0x94, 0x78, 0x52, 0xea, 0xc6, 0xfb, 0x11, 0x58, 0x69,
	0x86, 0x89, 0x20, 0xe7, 0x80, 0x4e, 0x97, 0xe4, 0x2f, 0x12, 0x51, 0xfa, 0xbc, 0x03, 0xd8, 0xb4,
	0x48, 0xec, 0xca, 0x48, 0x63, 0x96, 0x33, 0x1f, 0xda, 0xea, 0xdb, 0x04, 0x2d, 0x17, 0x0f, 0xb6,
	0xfe, 0x7e, 0x39, 0x22, 0xe1, 0x9f, 0x97, 0xa3, 0xfe, 0x21, 0x8f, 0xa3, 0xfb, 0x9e, 0x09, 0xbd,
	0x29, 0xc9, 0xe5, 0x00, 0x43, 0x2a, 0xb1, 0x42, 0x03, 0x8c, 0xf0, 0x6a, 0x80, 0x09, 0xbd, 0x29,
	0xc9, 0xf7, 0x5b, 0x7f, 0xfd, 0x3c, 0x6a, 0x78, 0xbf, 0xb4, 0xe0, 0xe6, 0xa3, 0x3c, 0x7c, 0x58,
	0x62, 0x87, 0x76, 0x0d, 0x53, 0xfc, 0xa6, 0xc0, 0x5c, 0x5f, 0xd2, 0x79, 0x49, 0xa7, 0xa1, 0xf3,
	0x33, 0x70, 0x5e, 0x47, 0x24, 0x4f, 0x55, 0x92, 0xe3, 0x12, 0x09, 0xcd, 0x25, 0x12, 0xbc, 0x9f,
	0x08, 0xaf, 0xaf, 0x52, 0xf1, 0x3a, 0x5e, 0x37, 0xa0, 0x93, 0x63, 0x22, 0x2a, 0xc6, 0xa7, 0x36,
	0xba, 0x84, 0xeb, 0x2d, 0x84, 0x6b, 0x09, 0x90, 0xff, 0x07, 0xd7, 0x63, 0xba, 0xba, 0x78, 0x12,
	0x60, 0x74, 0x21, 0x6c, 0x79, 0x2e, 0x91, 0x7e, 0x76, 0x46, 0x5a, 0x8c, 0xad, 0xb6, 0x83, 0x11,
	0x5e, 0x10, 0xc9, 0xb6, 0xda, 0xd2, 0x8c, 0xb6, 0xda, 0x14, 0xb6, 0xca, 0x95, 0xa8, 0x38, 0xbd,
	0xb8, 0x7a, 0xef, 0x81, 0x5b, 0x37, 0xe7, 0x99, 0xfd, 0xed, 0x1a, 0x08, 0x2e, 0x72, 0x7f, 0x4b,
	0x33, 0x52, 0xb5, 0xdb, 0x3f, 0x36, 0xa1, 0xfd, 0xa4, 0x7c, 0x0f, 0xb1, 0x0f, 0xa0, 0x2b, 0x93,
	0x7d, 0x1e, 0x49, 0x31, 0x68, 0xb8, 0x37, 0x8f, 0x8e, 0xc7, 0xef, 0x5a, 0xaf, 0x49, 0xef, 0x51,
	0xaa, 0x7c, 0x17, 0x65, 0xb4, 0x9a, 0x41, 0xd3, 0xdd, 0x38, 0x3a, 0x1e, 0x77, 0xab, 0xc5, 0x31,
	0x68, 0x95, 0x8d, 0x37, 0xb8, 0xe2, 0xf6, 0x8e, 0x8e, 0xc7, 0x2d, 0xd3, 0x72, 0x2e, 0xf4, 0x02,
	0xf3, 0x10, 0x51, 0x0c, 0xd6, 0xdc, 0xfe, 0xd1, 0xf1, 0xb8, 0xf7, 0xd0, 0xc6, 0x65, 0x8e, 0x48,
	0x47, 0x31, 0x68, 0x51, 0x6e, 0xd7, 0xc6, 0x6e, 0xeb, 0xbb, 0x5f, 0x87, 0x8d, 0xbb, 0xbf, 0xb5,
	0x61, 0xed, 0x51, 0x1e, 0x32, 0x05, 0x1d, 0xba, 0xf4, 0xd8, 0xf6, 0xe4, 0x4d, 0xff, 0x02, 0x27,
	0x6f, 0x78, 0x79, 0xba, 0x77, 0xcf, 0x33, 0xc4, 0xf2, 0xae, 0xa0, 0x43, 0x8d, 0xb0, 0xa2, 0x60,
	0xdd, 0x75, 0xba, 0xa2, 0x60, 0x7d, 0x83, 0x29, 0xe8, 0x10, 0x7e, 0x2b, 0x0a, 0xd6, 0x51, 0xbf,
	0xa2, 0x60, 0x2d, 0xd6, 0xe6, 0x48, 0xcd, 0x83, 0x58, 0x75, 0xa4, 0x35, 0x4d, 0xbd, 0xea, 0x48,
	0xeb, 0xba, 0x96, 0x15, 0xd0, 0xab, 0x80, 0x67, 0xf7, 0xfe, 0x7b, 0x7c, 0x6d, 0xaf, 0xb9, 0x9f,
	0x9e, 0x6f, 0xd0, 0xab, 0x7d, 0x12, 0x54, 0x2b, 0xf6, 0x59, 0xd7, 0x6e, 0x2b, 0xf6, 0x59, 0xdb,
	0x4f, 0x0f, 0x9e, 0xfe, 0x7e, 0x32, 0x6c, 0xbe, 0x38, 0x19, 0x36, 0xff, 0x3c, 0x19, 0x36, 0xbf,
	0x3f, 0x1d, 0x36, 0x5e, 0x9c, 0x0e, 0x1b, 0x7f, 0x9c, 0x0e, 0x1b, 0x4f, 0x3f, 0x0f, 0xa5, 0x7e,
	0x5e, 0xcc, 0x27, 0x81, 0x8a, 0xfd, 0xc5, 0xe7, 0x4e, 0xf5, 0xe3, 0xce, 0x3c, 0x52, 0xc1, 0xd7,
	0xc1, 0x73, 0x2e, 0x93, 0x3b, 0xe5, 0x9d, 0x9e, 0xaa, 0x4c, 0xfb, 0x07, 0x8b, 0xaf, 0x21, 0x7d,
	0x98, 0x62, 0x3e, 0xef, 0x98, 0x0f, 0x97, 0x7b, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x42, 0x7b,
	0x5b, 0xa8, 0x2e, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Create defines a method to create a new invoice.
	Create(ctx context.Context, in *MsgCreateInvoiceRequest, opts ...grpc.CallOption) (*MsgCreateInvoiceResponse, error)
	// Update defines a method to update an invoice.
	Update(ctx context.Context, in *MsgUpdateInvoiceRequest, opts ...grpc.CallOption) (*MsgUpdateInvoiceResponse, error)
	// Delete defines a method to create a new invoice.
	Delete(ctx context.Context, in *MsgDeleteInvoiceRequest, opts ...grpc.CallOption) (*MsgDeleteInvoiceResponse, error)
	// Cancel defines a method to cancel an invoice
	Cancel(ctx context.Context, in *MsgCancelInvoiceRequest, opts ...grpc.CallOption) (*MsgCancelInvoiceResponse, error)
	// Complete defines a method to complete an invoice
	Complete(ctx context.Context, in *MsgCompleteInvoiceRequest, opts ...grpc.CallOption) (*MsgCompleteInvoiceResponse, error)
	// Factor defines a method to factor an invoice
	Factor(ctx context.Context, in *MsgFactorInvoiceRequest, opts ...grpc.CallOption) (*MsgFactorInvoiceResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Create(ctx context.Context, in *MsgCreateInvoiceRequest, opts ...grpc.CallOption) (*MsgCreateInvoiceResponse, error) {
	out := new(MsgCreateInvoiceResponse)
	err := c.cc.Invoke(ctx, "/stateset.invoice.v1beta1.Msg/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Update(ctx context.Context, in *MsgUpdateInvoiceRequest, opts ...grpc.CallOption) (*MsgUpdateInvoiceResponse, error) {
	out := new(MsgUpdateInvoiceResponse)
	err := c.cc.Invoke(ctx, "/stateset.invoice.v1beta1.Msg/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Delete(ctx context.Context, in *MsgDeleteInvoiceRequest, opts ...grpc.CallOption) (*MsgDeleteInvoiceResponse, error) {
	out := new(MsgDeleteInvoiceResponse)
	err := c.cc.Invoke(ctx, "/stateset.invoice.v1beta1.Msg/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Cancel(ctx context.Context, in *MsgCancelInvoiceRequest, opts ...grpc.CallOption) (*MsgCancelInvoiceResponse, error) {
	out := new(MsgCancelInvoiceResponse)
	err := c.cc.Invoke(ctx, "/stateset.invoice.v1beta1.Msg/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Complete(ctx context.Context, in *MsgCompleteInvoiceRequest, opts ...grpc.CallOption) (*MsgCompleteInvoiceResponse, error) {
	out := new(MsgCompleteInvoiceResponse)
	err := c.cc.Invoke(ctx, "/stateset.invoice.v1beta1.Msg/Complete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Factor(ctx context.Context, in *MsgFactorInvoiceRequest, opts ...grpc.CallOption) (*MsgFactorInvoiceResponse, error) {
	out := new(MsgFactorInvoiceResponse)
	err := c.cc.Invoke(ctx, "/stateset.invoice.v1beta1.Msg/Factor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Create defines a method to create a new invoice.
	Create(context.Context, *MsgCreateInvoiceRequest) (*MsgCreateInvoiceResponse, error)
	// Update defines a method to update an invoice.
	Update(context.Context, *MsgUpdateInvoiceRequest) (*MsgUpdateInvoiceResponse, error)
	// Delete defines a method to create a new invoice.
	Delete(context.Context, *MsgDeleteInvoiceRequest) (*MsgDeleteInvoiceResponse, error)
	// Cancel defines a method to cancel an invoice
	Cancel(context.Context, *MsgCancelInvoiceRequest) (*MsgCancelInvoiceResponse, error)
	// Complete defines a method to complete an invoice
	Complete(context.Context, *MsgCompleteInvoiceRequest) (*MsgCompleteInvoiceResponse, error)
	// Factor defines a method to factor an invoice
	Factor(context.Context, *MsgFactorInvoiceRequest) (*MsgFactorInvoiceResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Create(ctx context.Context, req *MsgCreateInvoiceRequest) (*MsgCreateInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedMsgServer) Update(ctx context.Context, req *MsgUpdateInvoiceRequest) (*MsgUpdateInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedMsgServer) Delete(ctx context.Context, req *MsgDeleteInvoiceRequest) (*MsgDeleteInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedMsgServer) Cancel(ctx context.Context, req *MsgCancelInvoiceRequest) (*MsgCancelInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (*UnimplementedMsgServer) Complete(ctx context.Context, req *MsgCompleteInvoiceRequest) (*MsgCompleteInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (*UnimplementedMsgServer) Factor(ctx context.Context, req *MsgFactorInvoiceRequest) (*MsgFactorInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Factor not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stateset.invoice.v1beta1.Msg/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Create(ctx, req.(*MsgCreateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stateset.invoice.v1beta1.Msg/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Update(ctx, req.(*MsgUpdateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stateset.invoice.v1beta1.Msg/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Delete(ctx, req.(*MsgDeleteInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stateset.invoice.v1beta1.Msg/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Cancel(ctx, req.(*MsgCancelInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCompleteInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stateset.invoice.v1beta1.Msg/Complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Complete(ctx, req.(*MsgCompleteInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Factor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFactorInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Factor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stateset.invoice.v1beta1.Msg/Factor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Factor(ctx, req.(*MsgFactorInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stateset.invoice.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Msg_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Msg_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Msg_Delete_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Msg_Cancel_Handler,
		},
		{
			MethodName: "Complete",
			Handler:    _Msg_Complete_Handler,
		},
		{
			MethodName: "Factor",
			Handler:    _Msg_Factor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stateset/invoice/v1beta1/tx.proto",
}

func (m *Invoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Invoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Invoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeriodEndDate) > 0 {
		i -= len(m.PeriodEndDate)
		copy(dAtA[i:], m.PeriodEndDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PeriodEndDate)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.PeriodStartDate) > 0 {
		i -= len(m.PeriodStartDate)
		copy(dAtA[i:], m.PeriodStartDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PeriodStartDate)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.DueDate) > 0 {
		i -= len(m.DueDate)
		copy(dAtA[i:], m.DueDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DueDate)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Factor) > 0 {
		i -= len(m.Factor)
		copy(dAtA[i:], m.Factor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Factor)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Counterparty) > 0 {
		i -= len(m.Counterparty)
		copy(dAtA[i:], m.Counterparty)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Counterparty)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Party) > 0 {
		i -= len(m.Party)
		copy(dAtA[i:], m.Party)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Party)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Total) > 0 {
		i -= len(m.Total)
		copy(dAtA[i:], m.Total)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Total)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Subtotal) > 0 {
		i -= len(m.Subtotal)
		copy(dAtA[i:], m.Subtotal)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Subtotal)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.AmountRemaining) > 0 {
		i -= len(m.AmountRemaining)
		copy(dAtA[i:], m.AmountRemaining)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AmountRemaining)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AmountPaid) > 0 {
		i -= len(m.AmountPaid)
		copy(dAtA[i:], m.AmountPaid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AmountPaid)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AmountDue) > 0 {
		i -= len(m.AmountDue)
		copy(dAtA[i:], m.AmountDue)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AmountDue)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BillingReason) > 0 {
		i -= len(m.BillingReason)
		copy(dAtA[i:], m.BillingReason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BillingReason)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.InvoiceName) > 0 {
		i -= len(m.InvoiceName)
		copy(dAtA[i:], m.InvoiceName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InvoiceName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InvoiceNumber) > 0 {
		i -= len(m.InvoiceNumber)
		copy(dAtA[i:], m.InvoiceNumber)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InvoiceNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InvoiceId) > 0 {
		i -= len(m.InvoiceId)
		copy(dAtA[i:], m.InvoiceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InvoiceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InvoiceFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvoiceFilters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvoiceFilters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintTx(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateInvoiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateInvoiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateInvoiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeriodEndDate) > 0 {
		i -= len(m.PeriodEndDate)
		copy(dAtA[i:], m.PeriodEndDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PeriodEndDate)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.PeriodStartDate) > 0 {
		i -= len(m.PeriodStartDate)
		copy(dAtA[i:], m.PeriodStartDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PeriodStartDate)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.DueDate) > 0 {
		i -= len(m.DueDate)
		copy(dAtA[i:], m.DueDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DueDate)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Factor) > 0 {
		i -= len(m.Factor)
		copy(dAtA[i:], m.Factor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Factor)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Counterparty) > 0 {
		i -= len(m.Counterparty)
		copy(dAtA[i:], m.Counterparty)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Counterparty)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Party) > 0 {
		i -= len(m.Party)
		copy(dAtA[i:], m.Party)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Party)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Total) > 0 {
		i -= len(m.Total)
		copy(dAtA[i:], m.Total)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Total)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Subtotal) > 0 {
		i -= len(m.Subtotal)
		copy(dAtA[i:], m.Subtotal)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Subtotal)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.AmountRemaining) > 0 {
		i -= len(m.AmountRemaining)
		copy(dAtA[i:], m.AmountRemaining)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AmountRemaining)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AmountPaid) > 0 {
		i -= len(m.AmountPaid)
		copy(dAtA[i:], m.AmountPaid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AmountPaid)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AmountDue) > 0 {
		i -= len(m.AmountDue)
		copy(dAtA[i:], m.AmountDue)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AmountDue)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BillingReason) > 0 {
		i -= len(m.BillingReason)
		copy(dAtA[i:], m.BillingReason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BillingReason)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.InvoiceName) > 0 {
		i -= len(m.InvoiceName)
		copy(dAtA[i:], m.InvoiceName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InvoiceName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InvoiceNumber) > 0 {
		i -= len(m.InvoiceNumber)
		copy(dAtA[i:], m.InvoiceNumber)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InvoiceNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InvoiceId) > 0 {
		i -= len(m.InvoiceId)
		copy(dAtA[i:], m.InvoiceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InvoiceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateInvoiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateInvoiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateInvoiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InvoiceId) > 0 {
		i -= len(m.InvoiceId)
		copy(dAtA[i:], m.InvoiceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InvoiceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateInvoiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateInvoiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateInvoiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeriodEndDate) > 0 {
		i -= len(m.PeriodEndDate)
		copy(dAtA[i:], m.PeriodEndDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PeriodEndDate)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.PeriodStartDate) > 0 {
		i -= len(m.PeriodStartDate)
		copy(dAtA[i:], m.PeriodStartDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PeriodStartDate)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.DueDate) > 0 {
		i -= len(m.DueDate)
		copy(dAtA[i:], m.DueDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DueDate)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Factor) > 0 {
		i -= len(m.Factor)
		copy(dAtA[i:], m.Factor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Factor)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Counterparty) > 0 {
		i -= len(m.Counterparty)
		copy(dAtA[i:], m.Counterparty)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Counterparty)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Party) > 0 {
		i -= len(m.Party)
		copy(dAtA[i:], m.Party)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Party)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Total) > 0 {
		i -= len(m.Total)
		copy(dAtA[i:], m.Total)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Total)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Subtotal) > 0 {
		i -= len(m.Subtotal)
		copy(dAtA[i:], m.Subtotal)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Subtotal)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.AmountRemaining) > 0 {
		i -= len(m.AmountRemaining)
		copy(dAtA[i:], m.AmountRemaining)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AmountRemaining)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AmountPaid) > 0 {
		i -= len(m.AmountPaid)
		copy(dAtA[i:], m.AmountPaid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AmountPaid)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AmountDue) > 0 {
		i -= len(m.AmountDue)
		copy(dAtA[i:], m.AmountDue)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AmountDue)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BillingReason) > 0 {
		i -= len(m.BillingReason)
		copy(dAtA[i:], m.BillingReason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BillingReason)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.InvoiceName) > 0 {
		i -= len(m.InvoiceName)
		copy(dAtA[i:], m.InvoiceName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InvoiceName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InvoiceNumber) > 0 {
		i -= len(m.InvoiceNumber)
		copy(dAtA[i:], m.InvoiceNumber)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InvoiceNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InvoiceId) > 0 {
		i -= len(m.InvoiceId)
		copy(dAtA[i:], m.InvoiceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InvoiceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateInvoiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateInvoiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateInvoiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InvoiceId) > 0 {
		i -= len(m.InvoiceId)
		copy(dAtA[i:], m.InvoiceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InvoiceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelInvoiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelInvoiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelInvoiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InvoiceId) > 0 {
		i -= len(m.InvoiceId)
		copy(dAtA[i:], m.InvoiceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InvoiceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelInvoiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelInvoiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelInvoiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteInvoiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteInvoiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteInvoiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InvoiceId) > 0 {
		i -= len(m.InvoiceId)
		copy(dAtA[i:], m.InvoiceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InvoiceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteInvoiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteInvoiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteInvoiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCompleteInvoiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCompleteInvoiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCompleteInvoiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InvoiceId) > 0 {
		i -= len(m.InvoiceId)
		copy(dAtA[i:], m.InvoiceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InvoiceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCompleteInvoiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCompleteInvoiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCompleteInvoiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFactorInvoiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFactorInvoiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFactorInvoiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InvoiceId) > 0 {
		i -= len(m.InvoiceId)
		copy(dAtA[i:], m.InvoiceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InvoiceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFactorInvoiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFactorInvoiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFactorInvoiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Invoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InvoiceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InvoiceNumber)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InvoiceName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BillingReason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AmountDue)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AmountPaid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AmountRemaining)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Subtotal)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Total)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Party)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Counterparty)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Factor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DueDate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PeriodStartDate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PeriodEndDate)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	return n
}

func (m *InvoiceFilters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateInvoiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InvoiceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InvoiceNumber)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InvoiceName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BillingReason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AmountDue)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AmountPaid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AmountRemaining)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Subtotal)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Total)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Party)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Counterparty)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Factor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DueDate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PeriodStartDate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PeriodEndDate)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateInvoiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InvoiceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateInvoiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InvoiceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InvoiceNumber)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InvoiceName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BillingReason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AmountDue)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AmountPaid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AmountRemaining)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Subtotal)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Total)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Party)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Counterparty)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Factor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DueDate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PeriodStartDate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PeriodEndDate)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateInvoiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InvoiceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelInvoiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InvoiceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelInvoiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteInvoiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InvoiceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteInvoiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCompleteInvoiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InvoiceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCompleteInvoiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFactorInvoiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InvoiceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFactorInvoiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Invoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Invoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Invoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BillingReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountDue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountDue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountPaid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountPaid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountRemaining", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountRemaining = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtotal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtotal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Party", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Party = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counterparty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counterparty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Factor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Factor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DueDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DueDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodStartDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeriodStartDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodEndDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeriodEndDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvoiceFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvoiceFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvoiceFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateInvoiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateInvoiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateInvoiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BillingReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountDue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountDue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountPaid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountPaid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountRemaining", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountRemaining = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtotal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtotal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Party", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Party = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counterparty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counterparty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Factor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Factor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DueDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DueDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodStartDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeriodStartDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodEndDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeriodEndDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateInvoiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateInvoiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateInvoiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateInvoiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateInvoiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateInvoiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BillingReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountDue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountDue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountPaid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountPaid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountRemaining", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountRemaining = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtotal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtotal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Party", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Party = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counterparty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counterparty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Factor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Factor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DueDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DueDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodStartDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeriodStartDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodEndDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeriodEndDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateInvoiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateInvoiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateInvoiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelInvoiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelInvoiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelInvoiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelInvoiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelInvoiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelInvoiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteInvoiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteInvoiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteInvoiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteInvoiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteInvoiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteInvoiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCompleteInvoiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCompleteInvoiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCompleteInvoiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCompleteInvoiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCompleteInvoiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCompleteInvoiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFactorInvoiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFactorInvoiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFactorInvoiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFactorInvoiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFactorInvoiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFactorInvoiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
